#!/usr/bin/env node
/*jshint multistr: true */
/*
# Usage: homework init
# Summary: Interactively create a homework assignment
# Help: Interactively create a homework assignment
*/

var inquirer = require('inquirer');
var path = require('path');
var fs = require('fs');
var util = require('util');
var validate = require('../lib/validate-homework-data');
var initHomework = require('../lib/init-homework');
var normalize = require('../lib/normalize-homework-data');
var walk = require('walk');
var files = [];
var filePath = process.cwd();

console.log("This utility will walk you through creating a homework assignment.\n\
It only covers the most common items, and tries to guess sane defaults.\n\
\n\
See `homework docs json` for definitive documentation on these fields\n\
and exactly what they do.\n\
\n\
Press Control-C at any time to quit.");

// currently async, may need to be changed to sync.  
// The user could get ahead, and we do not want that.. 

var walker = walk.walk ( filePath , { followLinks: false});

walker.on('file', function(root, stat, next) {
  //add each file you find to list of files in varable files

  // relativePath replaces the first and only the fist '/' in the file 
  // so the file structure is evident
  var relativePath = root.replace(filePath, '').replace(/^\//, '');

  files.push( (relativePath.length ? relativePath + '/' : '') + stat.name);
  next();
});

walker.on('end', function() {
  var prompts = [
    {
      name: 'name',
      message: 'name',
      default: path.basename(process.cwd()),
      validate: transformValidator(validate.validateName)
    },
    {
      name: 'version',
      message: 'version',
      default: '0.0.1',
      validate: transformValidator(validate.validateVersion)
    },
    {
      name: 'title',
      message: 'title',
      default: function(answers){ return answers.name; },
      validate: transformValidator(validate.validateTitle)
    },
    {
      name: 'description',
      message: 'description',
      default: function(answers){ return answers.title; },
      validate: transformValidator(validate.validateDescription)
    },
    {
      name: 'readmeTemplate',
      message: 'Choose a README flavor',
      type: 'list',
      choices: ['JavaScript', 'Ruby', 'Python', 'iOS', 'Web Design', 'Plain']
    },
    {
      name: 'difficultyModes',
      message: 'Which difficulty modes do you want?',
      type: 'checkbox',
      choices: ['Easy', 'Normal', 'Hard', 'Nightmare'],
      default: ['Normal']
    },
    {
      name: 'keywords',
      message: 'keywords (comma separated)',
      validate: function(input){
        return transformValidator(validate.validateKeywords)(validate.toArray(input));
      },
      filter: function(input){
        return validate.toArray(input);
      },
      default: function(answers){
        return answers.readmeTemplate;
      }
    }
  ];
  if(files.length) {
    prompts.push({
      name: 'supplementalFiles',
      message: 'What files do you want?',
      type: 'checkbox',
      choices: files,
      default: files
    });
  }
  prompts.push({
    name: 'commit',
    type: 'confirm',
    message: function(answers){
      var data = JSON.stringify(normalize(answers), null, 4) + '\n';
      return util.format("About to write to %s\n%s\nIs this ok?", process.cwd(), data);
    }
  });
  inquirer.prompt(prompts, function(answers) {
    if(answers.commit){
      delete answers.commit;
      initHomework(answers);
    } else {
      console.log('Aborted.');
    }
  });
});

function transformValidator(validator){
  return function(input){
    var result = validator(input);
    return result.valid ? true : result.errors[0];
  };
}
